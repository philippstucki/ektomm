#!/usr/bin/env php
<?php
require 'vendor/autoload.php';

function notifyError($to) {
    fwrite(STDERR, "failed sending to {$to}".PHP_EOL);
}

if (empty($argv[1]) || !is_readable($argv[1])) {
    fwrite(STDERR, 'Usage: ektomm-send campaignconfig.php'.PHP_EOL);
    die(1);
}

// read the config
require($argv[1]);

$transport = Swift_SmtpTransport::newInstance($config['host'], $config['port']);
if (isset($config['username'])) {
    $transport->setUsername($config['username']);
}
if (isset($config['password'])) {
    $transport->setPassword($config['password']);
}

$mailer = Swift_Mailer::newInstance($transport);

fwrite(STDERR, "Starting to send...\n");
$msgSent = 0;
$msgError = 0;

$message = Swift_Message::newInstance($config['subject']);
$message->setFrom($config['from']);
$message->setBody($config['txtBody']);

// add html body if needed
if(!empty($config['htmlBody'])) {
    $message->addPart($config['htmlBody'], 'text/html');
}

while (FALSE !== ($line = fgets(STDIN))) {

    $to = trim($line);
    if ($to !== '') {

        try {
            $message->setTo(array($to));
        } catch(Swift_RfcComplianceException $e) {
            notifyError($to);
            $msgError++;
            continue;
        }

        $result = $mailer->send($message, $failures);
        if($result === 1) {
            $msgSent++;
            fwrite(STDERR, "sent to {$to}".PHP_EOL);
            fwrite(STDOUT, $to.PHP_EOL);
        } else {
            notifyError($to);
            $msgError++;
        }

    }
}

fwrite(STDERR, $msgSent.' messages sent, '.$msgError.' failed'.PHP_EOL);
